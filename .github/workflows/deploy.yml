name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      env:
        ENV: ${{ secrets.ENV }}
        EC2_SSH_USER: ${{ secrets.EC2_SSH_USER }}
      run: |
        echo "ENV=${ENV}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
        echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
        echo "TIME_ZONE=${{ secrets.TIME_ZONE }}" >> .env
        echo "LANGUAGE_CODE=${{ secrets.LANGUAGE_CODE }}" >> .env
        # Database settings (uncomment if using external PostgreSQL)
        # echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

    - name: Copy files to EC2
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: "./"
        REMOTE_HOST: ${{ secrets.EC2_HOST }}
        REMOTE_USER: ${{ secrets.EC2_SSH_USER }}
        TARGET: '/home/${{ secrets.EC2_SSH_USER }}/salao-backend'
        EXCLUDE: "/dist/, /node_modules/, /.git/, /venv/, /__pycache__/, *.pyc"
        SCRIPT_AFTER: |
          echo "Files copied successfullyyyy"
          echo "Cleaning up unused Docker resources..."
          sudo docker system prune -f
          
          echo "Stopping existing containers..."
          cd /home/${{ secrets.EC2_SSH_USER }}/salao-backend
          sudo docker-compose down || true

    - name: Build and start containers
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_SSH_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/${{ secrets.EC2_SSH_USER }}/salao-backend
          
          echo "Building and starting containers..."
          sudo docker-compose up -d --build
          
          echo "Waiting for services to start..."
          sleep 30
          
          echo "Running Django migrations..."
          sudo docker-compose exec -T salao-backend python manage.py migrate
          
          echo "Collecting static files..."
          sudo docker-compose exec -T salao-backend python manage.py collectstatic --noinput
          
          echo "Checking container status..."
          sudo docker-compose ps
          
          echo "Deployment completed successfully!"

    - name: Health check
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_SSH_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Performing health check..."
          sleep 10
          
          # Check if nginx is responding locally on EC2
          echo "Testing application health..."
          
          # Test nginx is serving requests
          if curl -f -s http://localhost/ > /dev/null 2>&1; then
            echo "‚úÖ Nginx is responding"
          else
            echo "‚ùå Nginx is not responding"
            sudo docker-compose logs salao-nginx --tail=20
          fi
          
          # Test Django admin is accessible
          if curl -f -s http://localhost/admin/ > /dev/null 2>&1; then
            echo "‚úÖ Django admin is accessible"
          else
            echo "‚ö†Ô∏è  Django admin check failed (might be normal if no admin configured)"
            sudo docker-compose logs salao-backend --tail=20
          fi
          
          # Test API endpoint
          if curl -f -s http://localhost/api/ > /dev/null 2>&1; then
            echo "‚úÖ API endpoint is responding"
          else
            echo "‚ö†Ô∏è  API endpoint check failed"
            sudo docker-compose logs salao-backend --tail=20
          fi
          
          # Show container status
          echo "\nContainer status:"
          sudo docker-compose ps
          
          # Show brief logs
          echo "\nRecent logs:"
          sudo docker-compose logs --tail=10
          
          echo "\nüéâ Deployment health check completed!"
          echo "Your application should be accessible at: ec2-3-131-171-43.us-east-2.compute.amazonaws.com"
